# phenotype of each cohort in each
# environment.
exp.pheno <- cbind(mid.mean + Aa * add.eff + Ad * dom.eff,
mid.mean + Aa * add.eff + Ad * dom.eff + env.effs)
colnames(exp.pheno) <- c("env1", "env2")
# we will have a lot of results to store
# one set for environmental variation
# effecting whole cohorts equally
# and another effecting random individuals
# from all cohorts
# this will cycle through the number of iterations
for(k in 1:iter){
# just a count that prints progress to terminal
if(k %% 10 == 0) cat(paste(" ",k))
# first we get a list of which environment
# each cohort will be drawn from
source.env <- rep(1, 8)
x <- sample(1:8, size = 3)
source.env[x] <- 2
# now we set up our basic data table borrowing
# the types of crosses from the ovule dataset
test.data <- ovules
# now we will go through each row of the test
# dataset and replace the phenotype mean and
# SE based on simulation
for(m in 1:nrow(test.data)){
mn <- exp.pheno[m, source.env[m]]
# this samples N individuals with the correct mean and SD from a
# normal distribution.
cohort <- rnorm(n = N, mean = mn, sd = SD)
# this calculates the SE based on our sample
SE <- sd(cohort)/sqrt(length(cohort))
# now we replace the emp data with the simulated
test.data[m, 2:3] <- c(mean(cohort), SE)
}
# Now we do LCA on our simulation
res <- LCA(test.data, max.pars=max.pars, messages=messages)
# here we extract the variable importances and estimates
cohort.sim.est[k, ] <- as.numeric(res$estimates[1, 2:17])
cohort.sim.SE[k, ] <- as.numeric(res$estimates[2, 2:17])
cohort.sim.vimp[k, ] <- as.numeric(res$varimp[, 2])
# individual level model
# start building from the emp. data.
}
# store some column names for all this data
colnames(cohort.sim.est) <-
colnames(cohort.sim.vimp) <-
colnames(cohort.sim.SE) <-
colnames(res$estimates)[2:17]
result.est[[i]] <- cohort.sim.est
result.vimp[[i]] <- cohort.sim.vimp
result.se[[i]] <- cohort.sim.SE
}
foo.est <- result.est[[3]]
foo.se <- result.se[[3]]
vimp <- result.vimp[[3]]
se <- result.se[[3]]
est <- result.est[[3]]
View(est)
View(est)
i <- 1
View(est)
View(se)
est[i, 1] + se[i, 1]) > 0
(est[i, 1] + se[i, 1])
(est[i, 1] + se[i, 1]) > 0
vimp.cutoff = .9
vimp[i, 1] > vimp.cutoff
View(vimp)
sig <- 0
for(i in 1:nrow(est)){
if((est[i, 1] + se[i, 1]) > 0){
if(vimp[i, 1] > vimp.cutoff){
sig <- sig+1
}
}
}
View(est)
check.power(result.est[[1]],
result.se[[1]],
result.vimp[[1]])
check.power <- function(est, se, vimp, vimp.cutoff = .9){
sig <- 0
for(i in 1:nrow(est)){
if((est[i, 1] + se[i, 1]) > 0){
if(vimp[i, 1] > vimp.cutoff){
sig <- sig+1
}
}
}
return(sig)
}
check.fp <- function(est, se, vimp, vimp.cutoff = .9){
sig <- 0
for(i in 1:nrow(est)){
hit <- F
for(j in 2:ncol(est))
if((est[i, j] + se[i, j]) > 0){
if(vimp[i, j] > vimp.cutoff){
hit <- T
}
}
if(hit == T) sig <- sig + 1
}
return(sig)
}
check.power(result.est[[1]],
result.se[[1]],
result.vimp[[1]])
check.fp(result.est[[1]],
result.se[[1]],
result.vimp[[1]])
names(result.est)
final.results <- matrix(,3,2)
colnames(final.results) <- c("power","fp")
row.names(final.results) <- names(result.est)
final.results <- matrix(,3,2)
colnames(final.results) <- c("power","fp")
row.names(final.results) <- names(result.est)
final.result[1,1] <- check.power(result.est[[1]],
result.se[[1]],
result.vimp[[1]])
final.result[1,2] <- check.fp(result.est[[1]],
result.se[[1]],
result.vimp[[1]])
final.result[2,1] <- check.power(result.est[[2]],
result.se[[2]],
result.vimp[[2]])
final.result[2,2] <- check.fp(result.est[[2]],
result.se[[2]],
result.vimp[[2]])
final.results <- matrix(,3,2)
colnames(final.results) <- c("power","fp")
row.names(final.results) <- names(result.est)
final.results[1,1] <- check.power(result.est[[1]],
result.se[[1]],
result.vimp[[1]])
final.results[1,2] <- check.fp(result.est[[1]],
result.se[[1]],
result.vimp[[1]])
final.results[2,1] <- check.power(result.est[[2]],
result.se[[2]],
result.vimp[[2]])
final.results[2,2] <- check.fp(result.est[[2]],
result.se[[2]],
result.vimp[[2]])
final.results[3,1] <- check.power(result.est[[3]],
result.se[[3]],
result.vimp[[3]])
final.results[3,2] <- check.fp(result.est[[3]],
result.se[[3]],
result.vimp[[3]])
View(final.results)
save.image("~/Desktop/Dropbox/raw.results.var.in.ss.RData")
ls()
final.results
ls()[-14]
# save results as SAGA2.sim.1.2.RData
rm(list=ls()[-14])
save.image("~/Desktop/Dropbox/projects/SAGA2/manuscript-unrecog-env/results/samp.size.env.RData")
load("~/Desktop/Dropbox/projects/SAGA2/manuscript-unrecog-env/results/samp.size.env.RData")
setwd("~/Desktop/Dropbox/projects/SAGA2/manuscript-unrecog-env/r.scripts/figures")
#READ IN YOUR TABLE OF DATA
load("../../results/samp.size.env.RData")
# stole these from figure one to have some color consistancy
library(plotrix)
z2.col <- smoothColors("pink", 10, "darkred")
z1.col <- smoothColors("skyblue", 10, "blue")
# setup the empty plot field
plot(y = 0,
x = 0,
xlim = c(10, 100), ylim = c(0, 1),
ylab = "proportion", xaxt = "n", xlab = "sample size")
# setup the empty plot field
plot(y = 0,
x = 0,
xlim = c(10, 100), ylim = c(0, 1),
ylab = "proportion", xaxt = "n", xlab = "sample size")
# add a base 0.05 line
abline(h = .05, lty = 2)
N <- c(10, 50, 100)
View(final.results)
# false positive rates
# should have 3 of these for AaSex, XaSex, Ya
lines(y = final.results[,2],
x = N,
type = "b", pch = 1, #change the pch based on which one 15, 16, 17
col = z2.col[10],
lwd = 2)
# false positive rates
# should have 3 of these for AaSex, XaSex, Ya
lines(y = final.results[,2]/100,
x = N,
type = "b", pch = 1, #change the pch based on which one 15, 16, 17
col = z2.col[10],
lwd = 2)
lines(y = data[,1]/100,
x = N,
type = "b", pch = 1, #change the pch based on which one 15, 16, 17
col = z1.col[10],
lwd = 2)
lines(y = final.results[,1]/100,
x = N,
type = "b", pch = 1, #change the pch based on which one 15, 16, 17
col = z1.col[10],
lwd = 2)
axis(side = 1, at = N, labels = N)
# legend section
lines(x = c(60, 65), y = rep(.7, 2), lwd = 2, col = z2.col[10])
lines(x = c(60, 65), y = rep(.75, 2), lwd = 2, col = z1.col[10])
text(x = 65, y = .7, pos = 4, label = "False Positive", cex = .6)
text(x = 65, y = .75, pos = 4, label = "Power", cex = .6)
# legend section
lines(x = c(10, 15), y = rep(.7, 2), lwd = 2, col = z2.col[10])
lines(x = c(10, 15), y = rep(.75, 2), lwd = 2, col = z1.col[10])
text(x = 15, y = .7, pos = 4, label = "False Positive", cex = .6)
text(x = 15, y = .75, pos = 4, label = "Power", cex = .6)
# legend section
lines(x = c(10, 15), y = rep(.9, 2), lwd = 2, col = z2.col[10])
lines(x = c(10, 15), y = rep(.95, 2), lwd = 2, col = z1.col[10])
text(x = 15, y = .9, pos = 4, label = "False Positive", cex = .6)
text(x = 15, y = .95, pos = 4, label = "Power", cex = .6)
# script to plot sex by gene effect
#READ IN YOUR TABLE OF DATA
load("../../results/samp.size.env.RData")
# stole these from figure one to have some color consistancy
library(plotrix)
z2.col <- smoothColors("pink", 10, "darkred")
z1.col <- smoothColors("skyblue", 10, "blue")
# setup the empty plot field
plot(y = 0,
x = 0,
xlim = c(10, 100), ylim = c(0, 1),
ylab = "proportion", xaxt = "n", xlab = "sample size")
# add a base 0.05 line
abline(h = .05, lty = 2)
N <- c(10, 50, 100)
# false positive rates
# should have 3 of these for AaSex, XaSex, Ya
lines(y = final.results[,2]/100,
x = N,
type = "b", pch = 1, #change the pch based on which one 15, 16, 17
col = z2.col[10],
lwd = 2)
lines(y = final.results[,1]/100,
x = N,
type = "b", pch = 1, #change the pch based on which one 15, 16, 17
col = z1.col[10],
lwd = 2)
axis(side = 1, at = N, labels = N)
# legend section
lines(x = c(10, 15), y = rep(.9, 2), lwd = 2, col = z2.col[10])
lines(x = c(10, 15), y = rep(.95, 2), lwd = 2, col = z1.col[10])
text(x = 15, y = .9, pos = 4, label = "False Positive", cex = .6)
text(x = 15, y = .95, pos = 4, label = "Power", cex = .6)
View(final.results)
setwd("~/Desktop/Dropbox/gitrepos/amphib.database")
warnings()
man.dat <- read.csv("manual.names.csv")
man.dat$Your.name
man.dat <- read.csv("manual.names.csv", as.is=T)
people <- c(man.dat$Your.name,man.dat$Your.Name)
man.dat$Your.nametable(people)
table(people)
final.dat <- read.csv("amphib.csv", as.is=T)
man.dat <- read.csv("manual.names.csv", as.is=T)
people <- c(man.dat$Your.name,man.dat$Your.Name)
table(people)
final.dat <- read.csv("amphib.csv", as.is=T)
sum(final.dat$Original.listing %in% man.dat$Original.name)
View(man.dat)
View(man.dat)
(final.dat$Original.listing %in% man.dat$Original.name)[1:20]
View(final.dat)
final.dat <- read.csv("amphib.csv", as.is=T)
sum(final.dat$Original.listing %in% man.dat$Original.name)
which(!final.dat$Original.listing %in% man.dat$Original.name)
View(final.dat)
misses <- which(!final.dat$Original.listing %in% man.dat$Original.name)
View(final.dat)
i <- 1
hit <- which(final.dat$Original.listing ==
man.dat$Original.name)
hit <- which(final.dat$Original.listing[i] ==
man.dat$Original.name)
View(man.dat)
man.dat <- read.csv("manual.names.csv", as.is=T)
people <- c(man.dat$Your.name,man.dat$Your.Name)
table(people)
final.dat <- read.csv("amphib.csv", as.is=T)
misses <- which(!final.dat$Original.listing %in% man.dat$Original.name)
hit <- which(final.dat$Original.listing[i] ==
man.dat$Original.name)
final.dat$Original.listing[i]
man.dat$Current.Name[hit]
man.dat <- read.csv("manual.names.csv", as.is=T)
people <- c(man.dat$Your.name,man.dat$Your.Name)
man.dat <- read.csv("manual.names.csv", as.is=T)
final.dat <- read.csv("amphib.csv", as.is=T)
misses <- which(!final.dat$Original.listing %in% man.dat$o.name)
i<-1
hit <- which(final.dat$Original.listing[i] ==
man.dat$o.nam)
final.dat$Family[i]
man.dat$fam[hit]
man.dat$new.sp[hit] != ""
View(final.dat)
final.dat <- read.csv("amphib.csv", as.is=T)
final.dat <- read.csv("amphib.csv", as.is=T)
man.dat <- read.csv("manual.names.csv", as.is=T)
final.dat <- read.csv("amphib.csv", as.is=T)
misses <- which(!final.dat$Original.listing %in% man.dat$o.name)
i <- 1
hit <- which(final.dat$Original.listing[i] ==
man.dat$o.nam)
final.dat$Family[i] <- man.dat$fam[hit]
if(man.dat$new.sp[hit] != ""){
final.dat$bad.name[i] <- final.dat$Original.listing[i]
final.dat$binom[i] <- man.dat$new.sp
}
man.dat <- read.csv("manual.names.csv", as.is=T)
final.dat <- read.csv("amphib.csv", as.is=T)
misses <- which(!final.dat$Original.listing %in% man.dat$o.name)
hit <- which(final.dat$Original.listing[i] ==
man.dat$o.nam)
final.dat$Family[i] <- man.dat$fam[hit]
if(man.dat$new.sp[hit] != ""){
final.dat$bad.name[i] <- final.dat$Original.listing[i]
final.dat$binom[i] <- man.dat$new.sp
}
View(final.dat)
i <- 17
hit <- which(final.dat$Original.listing[i] ==
man.dat$o.nam)
is.null(hit)
length(hit)
man.dat$fam[hit]
man.dat <- read.csv("manual.names.csv", as.is=T)
final.dat <- read.csv("amphib.csv", as.is=T)
misses <- which(!final.dat$Original.listing %in% man.dat$o.name)
for(i in 1:nrow(final.dat)){
hit <- which(final.dat$Original.listing[i] ==
man.dat$o.nam)
if(length(hit) > 0){
final.dat$Family[i] <- man.dat$fam[hit]
if(man.dat$new.sp[hit] != ""){
final.dat$bad.name[i] <- final.dat$Original.listing[i]
final.dat$binom[i] <- man.dat$new.sp
}else{
final.dat$binom[i] <- final.dat$Original.listing[i]
}
}
if(length(hit) == 0){
final.dat$binom[i] <- "CHECK.NOW"
}
}
warnings()
View(final.dat)
man.dat <- read.csv("manual.names.csv", as.is=T)
final.dat <- read.csv("amphib.csv", as.is=T)
misses <- which(!final.dat$Original.listing %in% man.dat$o.name)
for(i in 1:nrow(final.dat)){
hit <- which(final.dat$Original.listing[i] ==
man.dat$o.nam)
if(length(hit) > 0){
final.dat$Family[i] <- man.dat$fam[hit]
if(man.dat$new.sp[hit] != ""){
final.dat$bad.name[i] <- final.dat$Original.listing[i]
final.dat$binom[i] <- man.dat$new.sp[hit]
}else{
final.dat$binom[i] <- final.dat$Original.listing[i]
}
}
if(length(hit) == 0){
final.dat$binom[i] <- "CHECK.NOW"
}
}
warnings()
man.dat <- read.csv("manual.names.csv", as.is=T)
final.dat <- read.csv("amphib.csv", as.is=T)
misses <- which(!final.dat$Original.listing %in% man.dat$o.name)
View(final.dat)
final.dat$Original.listing
man.dat$o.name
man.dat <- read.csv("manual.names.csv", as.is=T)
final.dat <- read.csv("amphib.csv", as.is=T)
misses <- which(!final.dat$Original.listing %in% man.dat$)
man.dat <- read.csv("manual.names.csv", as.is=T)
final.dat <- read.csv("amphib.csv", as.is=T)
misses <- which(!final.dat$Original.listing %in% man.dat$o.name)
for(i in 1:nrow(final.dat)){
hit <- which(final.dat$Original.listing[i] ==
man.dat$o.nam)[1]
if(length(hit) > 0){
final.dat$Family[i] <- man.dat$fam[hit]
if(man.dat$new.sp[hit] != ""){
final.dat$bad.name[i] <- final.dat$Original.listing[i]
final.dat$binom[i] <- man.dat$new.sp[hit]
}else{
final.dat$binom[i] <- final.dat$Original.listing[i]
}
}
if(length(hit) == 0){
final.dat$binom[i] <- "CHECK.NOW"
}
}
which(final.dat$Original.listing[i] ==
man.dat$o.nam)[1]
hit <- which(final.dat$Original.listing[i] ==
man.dat$o.nam)[1]
!is.na(hit)
man.dat <- read.csv("manual.names.csv", as.is=T)
final.dat <- read.csv("amphib.csv", as.is=T)
misses <- which(!final.dat$Original.listing %in% man.dat$o.name)
for(i in 1:nrow(final.dat)){
hit <- which(final.dat$Original.listing[i] ==
man.dat$o.nam)[1]
if(!is.na(hit)){
final.dat$Family[i] <- man.dat$fam[hit]
if(man.dat$new.sp[hit] != ""){
final.dat$bad.name[i] <- final.dat$Original.listing[i]
final.dat$binom[i] <- man.dat$new.sp[hit]
}else{
final.dat$binom[i] <- final.dat$Original.listing[i]
}
}
if(is.na(hit)){
final.dat$binom[i] <- "CHECK.NOW"
}
}
View(final.dat)
write.csv(final.dat, file="check.csv")
shiny::runApp()
runApp()
foo <- read.csv("amphib.csv")
foo <- read.csv("amphib.csv")$Citation
foo <- read.csv("amphib.csv", as.is=T)$Citation
foo
unique(foo)
runApp()
dat <- read.csv("amphib.csv", as.is=T, check.names=F)
View(dat)
colnames(dat)
runApp()
runApp()
colnames(dat)
runApp()
runApp()
runApp()
runApp()
.75*1.25
1/.75
runApp()
View(dat)
runApp()
dat <- read.csv("amphib.csv", as.is=T, check.names=F)
View(dat)
runApp()
runApp()
dat$Citation[59]
runApp()
dat$Citation[59]
runApp()
dat$Citation[1787]
runApp()
runApp()
foo <- unique(dat$Citation)
runApp()
colNames(dat)
colnames(dat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(dat)
View(dat)
View(dat)
apply(dat$binom, strsplit)
vapply(dat$binom, strsplit)
help("vapply")
lapply(dat$binom, strsplit, "")
lapply(dat$binom, strsplit, " ")
lapply(dat$binom, strsplit, " ")[1]
i <- 1
dat$binom[i]
dat <- read.csv("amphib.csv", as.is=T, check.names=F)
View(dat)
dat$Species[i]
strplit(dat$Species[i], " ")
strplit(dat$Species[i], " ")
strsplit(dat$Species[i], " ")
strsplit(dat$Species[i], " ")[[1]]
dat$Original.listing[i]
strsplit(dat$Original.listing[i], " ")[[1]]
y <- strsplit(dat$Original.listing[i], " ")[[1]]
y[1]
c.gen <- c.sp <- o.gen <- o.sp <- c()
for(i in 1:nrow(dat)){
x <- strsplit(dat$Species[i], " ")[[1]]
y <- strsplit(dat$Original.listing[i], " ")[[1]]
c.gen[i] <- x[1]
c.sp[i] <- x[2]
o.gen[i] <- y[1]
o.sp[i] <- y[2]
}
runApp()
runApp()
runApp()
